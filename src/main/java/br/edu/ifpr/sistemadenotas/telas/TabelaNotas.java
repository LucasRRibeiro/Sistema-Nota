/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.edu.ifpr.sistemadenotas.telas;

import br.edu.ifpr.sistemadenotas.modelo.Notas;
import br.edu.ifpr.sistemadenotas.operacoes.OperacoesNotas;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.List;

/**
 *
 * @author Lukinhas
 */
public class TabelaNotas extends javax.swing.JFrame {

    private JPopupMenu popupMenu;
    private List<Notas> listaNotas; // Adicione este atributo

    public TabelaNotas() {
        initComponents();
        preencherTabela(); // Preenche a tabela assim que a tela for carregada

        // Inicializa o menu de contexto
        popupMenu = new JPopupMenu();

        JMenuItem menuItemEditar = new JMenuItem("Editar");
        menuItemEditar.addActionListener(evt -> editarNota());
        popupMenu.add(menuItemEditar);

        JMenuItem menuItemExcluir = new JMenuItem("Excluir");
        menuItemExcluir.addActionListener(evt -> excluirNota());
        popupMenu.add(menuItemExcluir);

        // Adiciona o MouseListener à tabela
        tblNotas.setComponentPopupMenu(popupMenu);
        tblNotas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                if (evt.isPopupTrigger()) {
                    popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
                }
            }
        });
    }

    public void atualizarTabela() {
        preencherTabela(); // Chama o método que preenche a tabela com os dados mais recentes
    }

    private void editarNota() {
        int selectedRow = tblNotas.getSelectedRow();
        if (selectedRow != -1) {
            // Obtenha os dados da linha selecionada
            Notas notaSelecionada = OperacoesNotas.buscarNotas().get(selectedRow);

            // Fecha a tela da tabela
            this.dispose();

            // Abre a tela de edição passando a nota selecionada e a referência da tabela
            EditarNotas editarNota = new EditarNotas(notaSelecionada, this); // Passa a referência da tabela
            editarNota.setVisible(true); // Exibe a tela de edição
        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma linha para editar.");
        }
    }

    private void excluirNota() {
        int selectedRow = tblNotas.getSelectedRow();
        if (selectedRow != -1) {
            // Obtenha o id_notas da linha selecionada
            int idNotas = (int) tblNotas.getValueAt(selectedRow, 0); // Supondo que o id_notas está na coluna 0

            // Confirmação antes de excluir
            int confirm = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja excluir esta nota?", "Confirmação", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                // Chama o método de exclusão
                OperacoesNotas.excluirNota(idNotas);

                // Atualiza a tabela após a exclusão
                preencherTabela();
                JOptionPane.showMessageDialog(this, "Nota excluída com sucesso.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma linha para excluir.");
        }
    }

    // Método para preencher a tabela com os dados das notas
    public void preencherTabela() {
        List<Notas> listaNotas = OperacoesNotas.buscarNotas(); // Busca as notas do banco de dados
        DefaultTableModel modelo = (DefaultTableModel) tblNotas.getModel();
        modelo.setRowCount(0); // Limpa a tabela antes de adicionar os novos dados

        for (Notas nota : listaNotas) {
            Object[] dados = {
                nota.getIdNotas(), // Adicionando o id
                nota.getTipoDePosse(),
                nota.getPorcentagem(),
                nota.getNomeVendedor(),
                nota.getCpfVendedor(),
                nota.getNomePropriedadeVendedor(),
                nota.getEnderecoVendedor(),
                nota.getIncra(),
                nota.getEstadoCivil(),
                nota.getCpfConjuge(),
                nota.getEstadoDestino(),
                nota.getEstado(),
                nota.getValorIcms(),
                nota.getNomeComprador(),
                nota.getCpfComprador(),
                nota.getNomePropriedadeComprador(),
                nota.getEnderecoComprador(),};
            modelo.addRow(dados); // Adiciona os dados na tabela
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PopMenuTabelaNotas = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        lblPesquisa = new javax.swing.JLabel();
        txtPesquisa = new javax.swing.JTextField();
        btnSair = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblNotas = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        lblPesquisa.setText("Pesquisa:");

        txtPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisaActionPerformed(evt);
            }
        });

        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        tblNotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Código", "Tipo de Posse", "Porcentagem", "Nome Vendedor", "CPF Vendedor", "Propriedade Vendedor", "Endereço Vendedor", "Incra", "Estado Civil", "CPF conjugê", "Estado Destino", "Estado", "Valor Icms", "Nome Comprador", "CPF Comprador", "Propriedade Comprador", "Enderço Comprador"
            }
        ));
        jScrollPane2.setViewportView(tblNotas);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSair)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblPesquisa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 1471, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPesquisa)
                    .addComponent(txtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSair)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1016, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 30, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1920, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1080, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisaActionPerformed

        String pesquisa = txtPesquisa.getText().toLowerCase(); // Obtém o texto da pesquisa e converte para minúsculas
        DefaultTableModel modelo = (DefaultTableModel) tblNotas.getModel(); // Modelo da tabela

        // Limpando a tabela antes de adicionar os resultados filtrados
        modelo.setRowCount(0);

        // Percorrendo a lista de notas e adicionando as que correspondem à pesquisa
        List<Notas> listaNotas = OperacoesNotas.buscarNotas(); // Busca as notas do banco de dados
        for (Notas nota : listaNotas) {
            // Verificando se o nome do comprador contém o texto da pesquisa
            if (nota.getNomeComprador().toLowerCase().contains(pesquisa)) {
                modelo.addRow(new Object[]{
                    nota.getNomeComprador(),
                    nota.getCpfComprador(),
                    nota.getEnderecoComprador(),
                    nota.getNomePropriedadeComprador(),
                    nota.getNomeVendedor(),
                    nota.getCpfVendedor(),
                    nota.getEnderecoVendedor(),
                    nota.getNomePropriedadeVendedor(),
                    nota.getCpfConjuge(),
                    nota.getEstado(),
                    nota.getIncra(),
                    nota.getPorcentagem(),
                    nota.getValorIcms(),
                    nota.getTipoDePosse(),
                    nota.getEstadoCivil(),
                    nota.getEstadoDestino()
                });
            }
        }

    }//GEN-LAST:event_txtPesquisaActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed

        // Fecha a tela de lista de notas
        this.dispose(); // Fecha a tela de lista de notas
        new MenuSistema().setVisible(true); // Abre a tela do menu

    }//GEN-LAST:event_btnSairActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TabelaNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TabelaNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TabelaNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TabelaNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TabelaNotas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu PopMenuTabelaNotas;
    private javax.swing.JButton btnSair;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblPesquisa;
    private javax.swing.JTable tblNotas;
    private javax.swing.JTextField txtPesquisa;
    // End of variables declaration//GEN-END:variables
}
